/*=============================================================================
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                                                                             *
 *                    COPYRIGHT, 2017 FORD MOTOR COMPANY                       *
 *                                                                             *
 *                               CONFIDENTIAL                                  *
 *                                                                             *
 * This is an unpublished work, which is a trade secret, created in            *
 * 2016.  Ford Motor Company owns all rights to this work and intends          *
 * to maintain it in confidence to preserve its trade secret status.           *
 * Ford Motor Company reserves the right to protect this work as an            *
 * unpublished copyrighted work in the event of an inadvertent or              *
 * deliberate unauthorized publication. Ford Motor Company also                *
 * reserves its rights under the copyright laws to protect this work           *
 * as a published work. Those having access to this work may not copy          *
 * it, use it, or disclose the information contained in it without the         *
 * written authorization of Ford Motor Company.                                *
 *                                                                             *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  File Name: WipsToGSDBMapping.java
  File description: Wips Plant code to GSDB Mapping tab
 ==============================================================================
 $HISTORY$
 ------------------------------------------------------------------------------
 Date             UserStory/         Modified BY         Description of Change
                  Defect#
 ------------------------------------------------------------------------------
 Nov-30-2017     US395468           MVAKA1            implemented WIPS Plant to GSDB Mapping
 ============================================================================*/
package com.ford.pd.bom.ui.cmf.panels;

import javafx.scene.control.Button;
import javafx.scene.control.ContentDisplay;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.Iterator;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.ford.pd.bom.common.tc.FB4GSDBSite;
import com.ford.pd.bom.domain.data.gsdb.FB4GSDBSupplierDataHolder;
import com.ford.pd.bom.ui.cmf.model.FB4EngineeringCommodityModel;
import com.ford.pd.bom.ui.cmf.panels.ManageEngineeringCommodityPanel.MultipleHyperlinkCellFactory;
import com.ford.pd.bom.ui.common.controls.TableFilterWrapper;
import com.ford.pd.bom.ui.common.panels.FB4Panel;
import com.ford.pd.bom.ui.constants.UIConstants;
import com.ford.pd.bom.ui.panels.FB4PAFAssignmentHistoryPanel;
import com.ford.pd.bom.ui.session.BOMSession;
import com.ford.pd.bom.ui.utils.ExportToExcelSrvc;
import com.sun.prism.paint.Color;
import com.sun.xml.bind.v2.runtime.unmarshaller.XsiNilLoader.Array;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.geometry.Orientation;
import javafx.geometry.Pos;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.Separator;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.util.Callback;

/**
 * TODO - Place class description here
 */
public class WersGsdbMappingPanel extends FB4Panel {

    @FXML
    private TableView<WersGsdbRecord> wersGsdbTable;

    @FXML
    private Hyperlink exportToExcel;
    
    @FXML
    private Hyperlink addNewWersMapping;

    private String excelFilePath = "";
    
    private int addNewRow = 0;

    BOMSession session;
    
   // final TableColumn<WersGsdbRecord, String> action = new TableColumn<>("Action");

    final TableColumn<WersGsdbRecord, String> action =  new TableColumn<WersGsdbRecord, String>("action");
    
    final TableColumn<WersGsdbRecord, String> wersPlantCode = new TableColumn<>("WERS Plant Code");

    final TableColumn<WersGsdbRecord, String> gsdbCode = new TableColumn<>("GSDB Code");

    final TableColumn<WersGsdbRecord, String> gsdbDescription = new TableColumn<>("GSDB Description");
    
    final TableColumn<WersGsdbRecord, String> docCode = new TableColumn<>("Doc Code");
    
   ObservableList<WersGsdbRecord> data = FXCollections.observableArrayList();

    TableFilterWrapper<WersGsdbRecord> tableFilterWrapper = null;
    
    final Hyperlink editlink = new Hyperlink("Edit");

    public WersGsdbMappingPanel(final BOMSession session) {
        super(UIConstants.FXML_CMF_BASE + "CMFWersGsdbMapping.fxml");
        //super(UIConstants.FXML_BASE + "WipsToGSDBMapping.fxml");
        this.session = session;
        init();
    }
    
   /* 
    private final ObservableList<WersGsdbRecord> data =
            FXCollections.observableArrayList(
                new WersGsdbRecord("Jacob", "Smith", "jacob","smith@example.com"),
                new WersGsdbRecord("Isabella", "Johnson", "isabella","johnson@example.com"),
                new WersGsdbRecord("Ethan", "Williams", "ethan","williams@example.com"),
                new WersGsdbRecord("Emma", "Jones", "emma","jones@example.com"),
                new WersGsdbRecord("Michael", "Brown", "michael","brown@example.com")
            );
       
  */
    @SuppressWarnings("unchecked")
    private void init() {
    	//editlink.setUnderline(true);
    	
    	action.setCellValueFactory(
    		    new PropertyValueFactory<WersGsdbRecord,String>("")
    		);
    	
        wersPlantCode.setCellValueFactory(
        	    new PropertyValueFactory<WersGsdbRecord,String>("wersPlantCode")
        	);
        gsdbCode.setCellValueFactory(
        	    new PropertyValueFactory<WersGsdbRecord,String>("gsdbCode")
        	);
        gsdbDescription.setCellValueFactory(
        	    new PropertyValueFactory<WersGsdbRecord,String>("gsdbDescription")
        	);
        docCode.setCellValueFactory(
        	    new PropertyValueFactory<WersGsdbRecord,String>("docCode")
        	);
       
        
        //Adding Columns names
        this.wersGsdbTable.getColumns().addAll(this.action, this.wersPlantCode, this.gsdbCode, this.gsdbDescription, this.docCode);
        //this.mappingTable.setItems(this.mappingData);
        this.wersGsdbTable.setColumnResizePolicy(TableView.UNCONSTRAINED_RESIZE_POLICY);
        
        action.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5)); // w * 1/5
        wersPlantCode.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5)); // w * 1/5
        gsdbCode.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5)); // w * 1/5
        gsdbDescription.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5)); // w * 1/5
        docCode.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5)); // w * 1/5
        
        wersGsdbTable.setItems(this.data);
        
        
        //Loading Table data from excel
        loadData();
        
        
        //mappingTable.setItems(getRecords());
        
        //Enabling Filter feature
        this.tableFilterWrapper = new TableFilterWrapper<>(this.wersGsdbTable,
               Arrays.asList(this.wersPlantCode, this.gsdbCode, this.gsdbDescription, this.docCode));
        //tableFilterWrapper.setMasterData(mappingData);
        //tableFilterWrapper.applyFilter();
        exportToExcelTable();
       
        
        //When user clicks on add NewWersMapping
        this.addNewWersMapping.setOnAction(event -> {
        	//System.out.println("New Row!"); 
        	addNewRow = 1;
        	WersGsdbRecord newRow = new WersGsdbRecord(); 
        	
        	newRow.setWersPlantCode("");
        	newRow.setWersPlantCode("");
        	newRow.setGsdbCode("");
        	newRow.setGsdbDescription("");
        	newRow.setDocCode("");
        	
        	data.add(0, newRow);
        	
        	});
        
        
        action.setCellFactory(column -> {
            return new TableCell<WersGsdbRecord, String>() {
                @Override
                protected void updateItem(String item, boolean empty) {
                	
                	//System.out.println("Factory Called");
                    super.updateItem(item, empty);
                    
                    final HBox hb = new HBox();
                    hb.setAlignment(Pos.CENTER);
                    final Hyperlink editLink = new Hyperlink("Edit");
                    editLink.setUnderline(true);
                    final Hyperlink saveLink = new Hyperlink("Save");
                    saveLink.setUnderline(true);
                    final Hyperlink cancellink = new Hyperlink("Cancel");
                    cancellink.setUnderline(true);
                    final Separator separator = new Separator();
                    
                    separator.setOrientation(Orientation.VERTICAL);
                    
                    System.out.println("item = "+ item);
                    
                    if (item == null || empty) {
						//setText(null);
						setStyle("-fx-background-color: yellow");
						System.out.println("CellEmpty Called");
					}
                    else
                    {
                    
                       if (addNewRow == 1) {
                    	 hb.getChildren().add(saveLink);
                         hb.getChildren().add(separator);
                         hb.getChildren().add(cancellink);
                         
                         setGraphic(hb);
                         this.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
                         addNewRow = 0;
                         System.out.println("Add New row called");
                       }
                    
                       else
                       {          	
                         hb.getChildren().add(editLink);
                         
                         
                         
                         setGraphic(hb);
                         this.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
                         System.out.println("Not new row called");
                       }
                       
                       
                   }
                    
                }
            };
          });

        
    }
    //init end


    private void loadData() {
        
    	//Reading excel file
    	
    	excelFilePath = "C:\\Users\\" + System.getProperty("user.name") + "\\bom\\BomInputs\\wersgsdb.xlsx";
        
    	FileInputStream fis = null;
    	
    	        try {
    
    	            fis = new FileInputStream(excelFilePath);
    	            
 
    	            // Using XSSF for xlsx format, for xls use HSSF
    	
    	            Workbook workbook = new XSSFWorkbook(fis);
    	            WersGsdbRecord record = new WersGsdbRecord();

    	            
    	            //looping over workbook sheet
    	             Sheet sheet = workbook.getSheetAt(0);
    	             Iterator<Row> rowIterator = sheet.iterator();
    	                		
    	             //iterating over each row
    	              while (rowIterator.hasNext()) {
    	                 Row row = (Row) rowIterator.next();
    	                 Iterator<Cell> cellIterator = row.cellIterator();
    	                    
    	                  //Iterating over each cell (column wise)  in a particular row.
    	                  while (cellIterator.hasNext()) {
   
    	                      Cell cell = (Cell) cellIterator.next();
    	                      if (Cell.CELL_TYPE_STRING == cell.getCellType()) {
    	                          	
      	                            if (cell.getColumnIndex() == 0) {
      	                                record.setWersPlantCode(String.valueOf(cell.getStringCellValue()));
      	                                System.out.println(cell.getStringCellValue());
      	                            }
      	
      	                            
      	                            else if (cell.getColumnIndex() == 1) {
      	
      	                                record.setGsdbCode(String.valueOf(cell.getStringCellValue()));
      	                                System.out.println(cell.getStringCellValue());
      	                            }
      	
      	                            
      	                            else if (cell.getColumnIndex() == 2) {
      	
      	                                record.setGsdbDescription(String.valueOf(cell.getStringCellValue()));
      	                                System.out.println(cell.getStringCellValue());
      	
      	                            }
      	                            
      	                          else if (cell.getColumnIndex() == 3) {
      	                          	
    	                                record.setDocCode(String.valueOf(cell.getStringCellValue()));
    	                                System.out.println(cell.getStringCellValue());
    	                                
    	                            }
    	
    	                        }
    	
    	                  }
    	                 
    	              	  WersGsdbRecord finalrecord = new WersGsdbRecord(record.wersPlantCode,record.gsdbCode,record.gsdbDescription,record.docCode);
    	              	 // wersGsdbTable.getItems().add(finalrecord);
    	                  System.out.println("Record Added "+ record.wersPlantCode + " "+ record.gsdbCode);
    	                  //wersGsdbTable.getItems().add(record);
    	                  data.add(finalrecord);
    	                  System.out.println(data);
    	                }
    	             // wersGsdbTable.setItems(this.data);
    	          
    	            fis.close();
    	
    	 
    	
    	        } catch (FileNotFoundException e) {
    	
    	            e.printStackTrace();
    	
    	        } catch (IOException e) {
    	
    	            e.printStackTrace();
    	
    	        }

    }


    private void exportToExcelTable() {
        this.exportToExcel.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(final ActionEvent event) {
                final TableView<WersGsdbRecord> excelTable = new TableView<>();
                excelTable.getColumns().addAll(WersGsdbMappingPanel.this.wersGsdbTable.getColumns());
                excelTable.setItems(WersGsdbMappingPanel.this.data);
                final ExportToExcelSrvc<WersGsdbRecord> exportExcelSrvc = new ExportToExcelSrvc<>(UIConstants.WERS_GSDB_XLS_FILE,
                        UIConstants.WERS_GSDB_XLS_SHEET_TITLE, UIConstants.WERS_GSDB_XLS_SHEET, false);
                exportExcelSrvc.exportToExcel(excelTable);
            }
        });
    }


    public static class WersGsdbRecord {
    	String action;
    	String wersPlantCode;
        String gsdbCode;
        String gsdbDescription;
        String docCode;
		
		private WersGsdbRecord(){}
        
        private WersGsdbRecord(String a, String b, String c, String d){
        	this.wersPlantCode = a;
        	this.gsdbCode = b;
        	this.gsdbDescription = c;
        	this.docCode = d;
        }

        public String getWersPlantCode() {
            return this.wersPlantCode;
        }

        public void setWersPlantCode(final String wersPlantCode) {

            this.wersPlantCode = wersPlantCode;
        }

        public String getGsdbCode() {
            return this.gsdbCode;
        }

        public void setGsdbCode(final String gsdbCode) {

            this.gsdbCode = gsdbCode;
        }

        public String getGsdbDescription() {
            return this.gsdbDescription;
        }

        public void setGsdbDescription(final String gsdbDescription) {

            this.gsdbDescription = gsdbDescription;
        }
        
        public String getDocCode() {
            return this.docCode;
        }

        public void setDocCode(final String docCode) {

            this.docCode = docCode;
        }
    }
    

   

 }


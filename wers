/*=============================================================================
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                                                                             *
 *                    COPYRIGHT, 2017 FORD MOTOR COMPANY                       *
 *                                                                             *
 *                               CONFIDENTIAL                                  *
 *                                                                             *
 * This is an unpublished work, which is a trade secret, created in            *
 * 2016.  Ford Motor Company owns all rights to this work and intends          *
 * to maintain it in confidence to preserve its trade secret status.           *
 * Ford Motor Company reserves the right to protect this work as an            *
 * unpublished copyrighted work in the event of an inadvertent or              *
 * deliberate unauthorized publication. Ford Motor Company also                *
 * reserves its rights under the copyright laws to protect this work           *
 * as a published work. Those having access to this work may not copy          *
 * it, use it, or disclose the information contained in it without the         *
 * written authorization of Ford Motor Company.                                *
 *                                                                             *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  File Name: WipsToGSDBMapping.java
  File description: Wips Plant code to GSDB Mapping tab
 ==============================================================================
 $HISTORY$
 ------------------------------------------------------------------------------
 Date             UserStory/         Modified BY         Description of Change
                  Defect#
 ------------------------------------------------------------------------------
 Nov-30-2017     US395468           ABHOOMRE            implemented WIPS Plant to GSDB Mapping
 ============================================================================*/
package com.ford.pd.bom.ui.cmf.panels;

import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.ContentDisplay;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.ford.pd.bom.common.tc.FB4GSDBSite;
import com.ford.pd.bom.domain.data.gsdb.FB4GSDBSupplierDataHolder;
import com.ford.pd.bom.ui.cmf.model.FB4EngineeringCommodityModel;
import com.ford.pd.bom.ui.cmf.panels.ManageEngineeringCommodityPanel.MultipleHyperlinkCellFactory;
import com.ford.pd.bom.ui.common.controls.TableFilterWrapper;
import com.ford.pd.bom.ui.common.dialog.FB4Dialog;
import com.ford.pd.bom.ui.common.panels.FB4Panel;
import com.ford.pd.bom.ui.constants.UIConstants;
import com.ford.pd.bom.ui.panels.FB4PAFAssignmentHistoryPanel;
import com.ford.pd.bom.ui.session.BOMSession;
import com.ford.pd.bom.ui.utils.ExportToExcelSrvc;
//import com.jidesoft.icons.IconSet.Text;
import com.sun.prism.paint.Color;
import com.sun.xml.bind.v2.runtime.unmarshaller.XsiNilLoader.Array;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.geometry.Orientation;
import javafx.geometry.Pos;
import javafx.scene.control.Hyperlink;
import javafx.scene.control.ListView;
import javafx.scene.control.Separator;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableColumn.CellDataFeatures;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.util.Callback;
import javafx.scene.text.Text;

/**
 * TODO - Place class description here
 */
public class WersGsdbMappingPanel extends FB4Panel {

    @FXML
    private TableView<WersGsdbRecord> wersGsdbTable;

    @FXML
    private Hyperlink exportToExcel;
    
    @FXML
    private Hyperlink addNewWersMapping;

    private String excelFilePath = "";
    
    private boolean isEdit = false;

    private boolean isGsdbSelected = false;
    
    BOMSession session;
    
   // final TableColumn<WersGsdbRecord, String> action = new TableColumn<>("Action");

    //final TableColumn<WersGsdbRecord, String> action =  new TableColumn<>("action");
    
    final TableColumn<WersGsdbRecord, String> actions = new TableColumn<>("Actions");
    
    final TableColumn<WersGsdbRecord, String> wersPlantCode = new TableColumn<>("WERS Plant Code");

    final TableColumn<WersGsdbRecord, String> gsdbCode = new TableColumn<>("GSDB Code");

    final TableColumn<WersGsdbRecord, String> gsdbDescription = new TableColumn<>("GSDB Description");
    
    final TableColumn<WersGsdbRecord, String> docCode = new TableColumn<>("Doc Code");
    
   ObservableList<WersGsdbRecord> data = FXCollections.observableArrayList();

    TableFilterWrapper<WersGsdbRecord> tableFilterWrapper = null;
    
    final Hyperlink editlink = new Hyperlink("Edit");

    public WersGsdbMappingPanel(final BOMSession session) {
        super(UIConstants.FXML_CMF_BASE + "CMFWersGsdbMapping.fxml");
        //super(UIConstants.FXML_BASE + "WipsToGSDBMapping.fxml");
        this.session = session;
        init();
    }
    
   /* 
    private final ObservableList<WersGsdbRecord> data =
            FXCollections.observableArrayList(
                new WersGsdbRecord("Jacob", "Smith", "jacob","smith@example.com"),
                new WersGsdbRecord("Isabella", "Johnson", "isabella","johnson@example.com"),
                new WersGsdbRecord("Ethan", "Williams", "ethan","williams@example.com"),
                new WersGsdbRecord("Emma", "Jones", "emma","jones@example.com"),
                new WersGsdbRecord("Michael", "Brown", "michael","brown@example.com")
            );
       
  */
    @SuppressWarnings("unchecked")
    private void init() {
    	//editlink.setUnderline(true);
    	
    	actions.setCellValueFactory(
    		    new PropertyValueFactory<WersGsdbRecord,String>("")
    		);
    	
        wersPlantCode.setCellValueFactory(
        	    new PropertyValueFactory<WersGsdbRecord,String>("wersPlantCode")
        	);
        gsdbCode.setCellValueFactory(
        	    new PropertyValueFactory<WersGsdbRecord,String>("gsdbCode")
        	);
        gsdbDescription.setCellValueFactory(
        	    new PropertyValueFactory<WersGsdbRecord,String>("gsdbDescription")
        	);
        docCode.setCellValueFactory(
        	    new PropertyValueFactory<WersGsdbRecord,String>("docCode")
        	);
       
        
        //Adding Columns names
        this.wersGsdbTable.getColumns().addAll(this.actions, this.wersPlantCode, this.gsdbCode, this.gsdbDescription, this.docCode);
        //this.mappingTable.setItems(this.mappingData);
        this.wersGsdbTable.setColumnResizePolicy(TableView.UNCONSTRAINED_RESIZE_POLICY);
        
        actions.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5)); // w * 1/5
        wersPlantCode.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5)); // w * 1/5
        gsdbCode.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5)); // w * 1/5
        gsdbDescription.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5)); // w * 1/5
        docCode.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5)); // w * 1/5
        
        wersGsdbTable.setItems(this.data);
        
        
        //Loading Table data from excel
        loadData();
        
        
        //mappingTable.setItems(getRecords());
        
        //Enabling Filter feature
        this.tableFilterWrapper = new TableFilterWrapper<>(this.wersGsdbTable,
              Arrays.asList(this.wersPlantCode, this.gsdbCode, this.gsdbDescription, this.docCode));
        tableFilterWrapper.setMasterData(data);
        tableFilterWrapper.applyFilter();
      //  exportToExcelTable();
       
        
        //When user clicks on add NewWersMapping
        this.addNewWersMapping.setOnAction(event -> {
        	//System.out.println("New Row!"); 
        	
           if(!isEdit)
           {
        	isEdit = true;
        	WersGsdbRecord newRow = new WersGsdbRecord(); 
        	
        	newRow.setWersPlantCode("");
        	newRow.setGsdbCode("");
        	newRow.setGsdbDescription("");
        	newRow.setDocCode("");
        	
        	data.add(0, newRow);
        	this.wersGsdbTable.setItems(this.data);
           }
           
           //Show error message
           else
           {
        	   Alert alert = new Alert(AlertType.INFORMATION);
        	   alert.setTitle("Information Dialog");
        	   alert.setHeaderText(null);
        	   alert.setContentText("Please Save or Cancel the already editing Mapping Row!");

        	   alert.showAndWait();
           }
        	
       });
        
        
        actions.setCellFactory(new Callback<TableColumn<WersGsdbRecord, String>, 
                TableCell<WersGsdbRecord, String>>()
                {
                    @Override
                    public TableCell<WersGsdbRecord, String> call(
                            TableColumn<WersGsdbRecord, String> param)
                    {
                        return new TableCell<WersGsdbRecord, String>()
                        {
                            @Override
                            protected void updateItem(String item, boolean empty)
                            {
                                
                                if (!empty)
                                {
                                	
                                	final HBox hb = new HBox();
                                    hb.setAlignment(Pos.CENTER);
                                    final Hyperlink editLink = new Hyperlink("Edit");
                                    editLink.setUnderline(true);
                                    final Hyperlink saveLink = new Hyperlink("Save");
                                    saveLink.setUnderline(true);
                                    final Hyperlink cancellink = new Hyperlink("Cancel");
                                    cancellink.setUnderline(true);
                                    final Separator separator = new Separator();
                                    
                                    separator.setOrientation(Orientation.VERTICAL);
                                    //System.out.print("Update called");
                                    int currentIndex = indexProperty().getValue();
                                    
                                    //System.out.println("Index value "+currentIndex);
                                    String rowCheck = param.getTableView().getItems().get(currentIndex).getWersPlantCode();
                                    //System.out.println("WersPlantCode " +rowCheck);
                                    
                                    
                                    if(isEdit && currentIndex == 0 )
                                    {
                                    	
                                    	hb.getChildren().add(saveLink);
                                        hb.getChildren().add(separator);
                                        hb.getChildren().add(cancellink);
                                        
                                        setGraphic(hb);
                                        this.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);                                        
                                        
                                    }
                                    else
                                    {
                                    	hb.getChildren().add(editLink);
                                        setGraphic(hb);
                                        this.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
                                    	
                                    }
                                    
                                }
                                
                                else{
                                	setGraphic(null);
                                }
                            }
                        };
                    }
                });
        
        gsdbCode.setCellFactory(new Callback<TableColumn<WersGsdbRecord, String>, 
                TableCell<WersGsdbRecord, String>>()
                {
                    @Override
                    public TableCell<WersGsdbRecord, String> call(
                            TableColumn<WersGsdbRecord, String> param)
                    {
                        return new TableCell<WersGsdbRecord, String>()
                        {
                            @Override
                            protected void updateItem(String item, boolean empty)
                            {
                                
                                if (!empty)
                                {
                                	
                                	final HBox hb = new HBox();
                                    hb.setAlignment(Pos.CENTER);
                                    final Hyperlink editLink = new Hyperlink("Search GSDB code");
                                    editLink.setUnderline(true);
                     
                                    //System.out.print("Update called");
                                    int currentIndex = indexProperty().getValue();
                                    
                                    //System.out.println("Index value "+currentIndex);
                                    String rowCheck = param.getTableView().getItems().get(currentIndex).getWersPlantCode();
                                    //System.out.println("WersPlantCode " +rowCheck);
                                    
                                    
                                    if(isEdit && currentIndex == 0 && !isGsdbSelected )
                                    {
                                    	hb.getChildren().add(editLink);
                                        setGraphic(hb);
                                        this.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);                                        
                                        
                                    }
                                    else
                                    {
                                    	//System.out.println("oooooooooooooooooooooooooo " + item );
                                    	setText(item);
                                    	setContentDisplay(ContentDisplay.TEXT_ONLY);
                                    	setGraphic(null);
                                    	//setStyle("");
                                    	//System.out.println("This is normal row");
                                    	
                                    }
                                    
                                    editLink.setOnAction(new EventHandler<ActionEvent>() {
                                        @Override
                                        public void handle(final ActionEvent event) {
                                        	
                                            System.out.println("Gsdb Modal Opened");
                                            Stage window = new Stage();
                                          //Instantiating the VBox class  
                                            BorderPane bpane = new BorderPane();
  
                                            Text text = new Text();        
                                            Button select = new Button("select");
                                            Button close = new Button("close");
                                            
                                            
                                            ListView<String> gsdbList = new ListView<String>();
                                            ObservableList<String> items =FXCollections.observableArrayList (
                                                "GSDB1", "GSDB2", "GSDB3", "GSDB4");
                                            gsdbList.setItems(items);
                                            gsdbList.setPrefWidth(300);
                                            gsdbList.setPrefHeight(250);
                                            gsdbList.getSelectionModel().getSelectedItem();
                                            
                                            
                                            
                                            Map<String, String> map = new HashMap<String, String>();
                                            map.put("GSDB1", "GSDB1 corresponding description");
                                            map.put("GSDB2", "GSDB2 corresponding description");
                                            map.put("GSDB3", "GSDB3 corresponding description");
                                            map.put("GSDB4", "GSDB4 corresponding description");
                                            System.out.println(map.get("GSDB1"));
                                            
                                            HBox hbox = new HBox();    
                                            
                                            //Setting the space between the nodes of a HBox pane 
                                            hbox.setSpacing(10);    
                                            //retrieving the observable list of the HBox 
                                            ObservableList<Node> olist = hbox.getChildren();  
                                            
                                            //Adding all the nodes to the observable list (HBox) 
                                            olist.addAll(select,close); 
                                            
                                            
                                            
                                            bpane.setTop(text);
                                            bpane.setBottom(hbox);
                                            bpane.setCenter(gsdbList);
                                            
                                            close.setOnAction(new EventHandler<ActionEvent>() {
                                                @Override public void handle(ActionEvent e) {
                                                    window.close();
                                                }
                                            });
                                            
                                            select.setOnAction(new EventHandler<ActionEvent>() {
                                            	
                                                @Override public void handle(ActionEvent e) {
                                                	
                                                	String selectedItem = gsdbList.getSelectionModel().getSelectedItem();
                                                	System.out.println("Selected item is " + selectedItem);
                                                	System.out.println("Respective description is " + map.get(selectedItem));
                                                    
                                                	if(gsdbList.getSelectionModel().getSelectedIndex() != -1)
                                                	{
                                                		isGsdbSelected = true;
                                                		setGraphic(null);
                                                    	setStyle("");
                                                    	
                                                    	setContentDisplay(ContentDisplay.TEXT_ONLY);
                                                    	setText(selectedItem);
                                                    	//param.getTableView().getItems().get(currentIndex).wersPlantCode = map.get(selectedItem);
                                                    	
                                                    	isEdit = true;
                                                    	WersGsdbRecord newRow = new WersGsdbRecord(); 
                                                    	
                                                    	newRow.setWersPlantCode(param.getTableView().getItems().get(currentIndex).getWersPlantCode());
                                                    	newRow.setGsdbCode(selectedItem);
                                                    	newRow.setGsdbDescription(map.get(selectedItem));
                                                    	newRow.setDocCode(param.getTableView().getItems().get(currentIndex).getDocCode());
                                                    	//System.out.println("New row set  WersPlantCode = "+ param.getTableView().getItems().get(currentIndex).getWersPlantCode());
                                                    	//System.out.println("New row get WersPlantCode = "+ newRow.getWersPlantCode());
                                                    	//System.out.println("Data before adding new data  "+ data);
                                                    	data.add(0, newRow);
                                                    	wersGsdbTable.setItems(data);
                                                    	//System.out.println("Data after adding new data  "+ data);
                                                    	data.remove(1);
                                                    	wersGsdbTable.setItems(data);
                                                    	//System.out.println("Data after removing second row  "+ data);
                                                    	wersGsdbTable.setItems(data);
                                                    	
                                                    	
                                                    	
                                                    	window.close();
                                                	}

                                                }
                                            });
                                            	
                                       
                                            //Setting the text to be added. 
                                            text.setText("Please select GSDB code"); 
                                            
                                            
                                            Scene scene = new Scene(bpane,500,400);
                                            window.setScene(scene);
                                            window.setTitle("GSDB Code");
                                            window.initModality(Modality.APPLICATION_MODAL);
                                            
                                         
                                            window.showAndWait();
                                        }
                                    });
                                    
                                    
                                    
                                    
                                    
                                }
                                
                                else{
                                	setGraphic(null);
                                	setText(null);
                                }
                            }
                        };
                    }
                });
        
        
        
        wersPlantCode.setCellFactory(new Callback<TableColumn<WersGsdbRecord, String>, 
                TableCell<WersGsdbRecord, String>>()
                {
                    @Override
                    public TableCell<WersGsdbRecord, String> call(
                            TableColumn<WersGsdbRecord, String> param)
                    {
                        return new TableCell<WersGsdbRecord, String>()
                        {
                            @Override
                            protected void updateItem(String item, boolean empty)
                            {
                               
                                if (item != null && !empty) 
                                {
                                	
                                	final HBox hb = new HBox();
                                    hb.setAlignment(Pos.CENTER);
                                    
                                    TextField textfield = new TextField();
                                    textfield.setOnKeyReleased(new EventHandler<KeyEvent>() {
                                        @Override
                                        public void handle(KeyEvent event) {
                                        	
                                        	//Saving in data array
                                        	WersGsdbRecord model = param.getTableView().getItems().get(indexProperty().getValue());
                                        	model.wersPlantCode = textfield.getText();
                                        	System.out.println("WersPlantCode= "+ model.wersPlantCode);
                                        	}
                                    });
                                    textfield.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5));
                                    
                                    int currentIndex = indexProperty().getValue();
                                    
                                   
                                    if(isEdit && currentIndex == 0 && !isGsdbSelected )
                                    {
                                    	
                                    	hb.getChildren().add(textfield);
                                    	setStyle("-fx-background-color: yellow");
                                        setGraphic(hb);
                                        this.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
                                        
                                        //isEdit = false;
                                        //addNewRow = 0;
                                        System.out.println("This is Editable row");
                                        
                                    }
                                    
                                    else if(isGsdbSelected)
                                    {
                                    	textfield.setText(item);
                                    	hb.getChildren().add(textfield);
                                    	setStyle("-fx-background-color: yellow");
                                        setGraphic(hb);
                                        this.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
                                        
                                        //isEdit = false;
                                        //addNewRow = 0;
                                    }
                                    else
                                    {
                                    	setText(item);
                                    	setContentDisplay(ContentDisplay.TEXT_ONLY);
                                    	setGraphic(null);
                                    	setStyle("");
                                    	//System.out.println("This is normal row");
                                    	
                                    }
                                    
                                }
                                
                                else{
                                	
                                	setGraphic(null);
                                	setText(null);
                                }
                            }
                        };
                    }
                });
        
        
        docCode.setCellFactory(new Callback<TableColumn<WersGsdbRecord, String>, 
                TableCell<WersGsdbRecord, String>>()
                {
                    @Override
                    public TableCell<WersGsdbRecord, String> call(
                            TableColumn<WersGsdbRecord, String> param)
                    {
                        return new TableCell<WersGsdbRecord, String>()
                        {
                            @Override
                            protected void updateItem(String item, boolean empty)
                            {
                               
                                if (item != null && !empty) 
                                {
                                	
                                	final HBox hb = new HBox();
                                    hb.setAlignment(Pos.CENTER);
                                    
                                    TextField textfield = new TextField();
                                    textfield.prefWidthProperty().bind(wersGsdbTable.widthProperty().divide(5));
                                    
                                    textfield.setOnKeyReleased(new EventHandler<KeyEvent>() {
                                        @Override
                                        public void handle(KeyEvent event) {
                                        	
                                        	WersGsdbRecord model = param.getTableView().getItems().get(indexProperty().getValue());
                                        	model.docCode = textfield.getText();
                                        	
                                        	System.out.println("Doccode= "+ model.docCode);
                                        	}
                                    });
                                    
                                    int currentIndex = indexProperty().getValue();
                                    
                                   
                                    if(isEdit && currentIndex == 0 && !isGsdbSelected )
                                    {
                                    	
                                    	hb.getChildren().add(textfield);
                                    	setStyle("-fx-background-color: yellow");
                                        setGraphic(hb);
                                        this.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
                                        
                                        //isEdit = false;
                                        //addNewRow = 0;
                                        //System.out.println("This is Editable row");
                                        
                                    }
                                    else if(isGsdbSelected)
                                    {
                                    	textfield.setText(item);
                                    	hb.getChildren().add(textfield);
                                    	setStyle("-fx-background-color: yellow");
                                        setGraphic(hb);
                                        this.setContentDisplay(ContentDisplay.GRAPHIC_ONLY);
                                        
                                        //isEdit = false;
                                        //addNewRow = 0;
                                    }
                                    else
                                    {
                                    	setText(item);
                                    	setContentDisplay(ContentDisplay.TEXT_ONLY);
                                    	setGraphic(null);
                                    	setStyle("");
                                    	//System.out.println("This is normal row");
                                    	
                                    }
                                    
                                }
                                
                                else{
                                	System.out.println("0000000000000000000000000000000000");
                                	setGraphic(null);
                                	setText(null);
                                }
                            }
                        };
                    }
                });
        
        
        
    }
    //init end


    private void loadData() {
        
    	//Reading excel file
    	
    	excelFilePath = "C:\\Users\\" + System.getProperty("user.name") + "\\bom\\BomInputs\\wersgsdb.xlsx";
        
    	FileInputStream fis = null;
    	
    	        try {
    
    	            fis = new FileInputStream(excelFilePath);
    	            
 
    	            // Using XSSF for xlsx format, for xls use HSSF
    	
    	            Workbook workbook = new XSSFWorkbook(fis);

    	            
    	            //looping over workbook sheet
    	             Sheet sheet = workbook.getSheetAt(0);
    	             Iterator<Row> rowIterator = sheet.iterator();
    	                		
    	             //iterating over each row
    	              while (rowIterator.hasNext()) {
    	            	  
    	            	 WersGsdbRecord record = new WersGsdbRecord();
    	                 Row row = (Row) rowIterator.next();
    	                 Iterator<Cell> cellIterator = row.cellIterator();
    	                    
    	                  //Iterating over each cell (column wise)  in a particular row.
    	                  while (cellIterator.hasNext()) {
   
    	                      Cell cell = (Cell) cellIterator.next();
    	                      if (Cell.CELL_TYPE_STRING == cell.getCellType()) {
    	                          	
      	                            if (cell.getColumnIndex() == 0) {
      	                                record.setWersPlantCode(String.valueOf(cell.getStringCellValue()));
      	                               // System.out.println(cell.getStringCellValue());
      	                            }
      	
      	                            
      	                            else if (cell.getColumnIndex() == 1) {
      	
      	                                record.setGsdbCode(String.valueOf(cell.getStringCellValue()));
      	                               // System.out.println(cell.getStringCellValue());
      	                            }
      	
      	                            
      	                            else if (cell.getColumnIndex() == 2) {
      	
      	                                record.setGsdbDescription(String.valueOf(cell.getStringCellValue()));
      	                               // System.out.println(cell.getStringCellValue());
      	
      	                            }
      	                            
      	                          else if (cell.getColumnIndex() == 3) {
      	                          	
    	                                record.setDocCode(String.valueOf(cell.getStringCellValue()));
    	                               // System.out.println(cell.getStringCellValue());
    	                                
    	                            }
    	
    	                        }
    	
    	                  }
    	                  
    	                  
    	                   data.add(record);
    	                  
    	                  //wersGsdbTable.getItems().add(record);
    	                  System.out.println("Row added");
    	                  System.out.println(data);
    	                }
    	          
    	               
    	            fis.close();
    	
    	 
    	
    	        } catch (FileNotFoundException e) {
    	
    	            e.printStackTrace();
    	
    	        } catch (IOException e) {
    	
    	            e.printStackTrace();
    	
    	        }

    }


    private void exportToExcelTable() {
        this.exportToExcel.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(final ActionEvent event) {
                final TableView<WersGsdbRecord> excelTable = new TableView<>();
                excelTable.getColumns().addAll(WersGsdbMappingPanel.this.wersGsdbTable.getColumns());
                excelTable.setItems(WersGsdbMappingPanel.this.data);
                final ExportToExcelSrvc<WersGsdbRecord> exportExcelSrvc = new ExportToExcelSrvc<>(UIConstants.WERS_GSDB_XLS_FILE,
                        UIConstants.WERS_GSDB_XLS_SHEET_TITLE, UIConstants.WERS_GSDB_XLS_SHEET, false);
                exportExcelSrvc.exportToExcel(excelTable);
            }
        });
    }


    public static class WersGsdbRecord {
    	
    	String wersPlantCode;
        String gsdbCode;
        String gsdbDescription;
        String docCode;
		
		private WersGsdbRecord(){
			this.wersPlantCode = "";
        	this.gsdbCode = "";
        	this.gsdbDescription = "";
        	this.docCode = "";
			
		}
        
        private WersGsdbRecord(String a, String b, String c, String d){
        	this.wersPlantCode = a;
        	this.gsdbCode = b;
        	this.gsdbDescription = c;
        	this.docCode = d;
        }

        public String getWersPlantCode() {
            return this.wersPlantCode;
        }

        public void setWersPlantCode(final String wersPlantCode) {

            this.wersPlantCode = wersPlantCode;
        }

        public String getGsdbCode() {
            return this.gsdbCode;
        }

        public void setGsdbCode(final String gsdbCode) {

            this.gsdbCode = gsdbCode;
        }

        public String getGsdbDescription() {
            return this.gsdbDescription;
        }

        public void setGsdbDescription(final String gsdbDescription) {

            this.gsdbDescription = gsdbDescription;
        }
        
        public String getDocCode() {
            return this.docCode;
        }

        public void setDocCode(final String docCode) {

            this.docCode = docCode;
        }
    }
    

   

 }

